#include "webHandlerInternal.h"

#include <assert.h>

#include "stdTypes.h"

typedef struct RequestReply_t {
  struct evkeyvalq* replyHeaders;
  struct evbuffer* replyBody;
} RequestReply;

typedef struct RequestInfo_t {
  struct evhttp_request* req;
  const worker* workerPtr;

  // [subset of] parsed stuff from req
  enum evhttp_cmd_type method;
  const char* uri_host;
  const char* uri_path;
  const char* uri_query;
  const char* uri_scheme;
  struct evkeyvalq* requestHeaders;
  struct evbuffer* requestBody;
  char* remoteAddress;
  Int16U remotePort;
} RequestInfo;

static void parseRequest(RequestInfo& requestInfo);

HandleRequestReply handleRequest(struct evhttp_request* req, worker* workerPtr,
				 struct evkeyvalq* replyHeaders, struct evbuffer* replyBody) {
  int rc;
  HandleRequestReply reply = {HTTP_OK, "OK"};
  RequestInfo requestInfo = {req, workerPtr};  // partial init (http://stackoverflow.com/questions/10828294/c-and-c-partial-initialization-of-automatic-structure)
  RequestReply requestReply = {replyHeaders, replyBody};
  
  parseRequest(requestInfo);
  rc = evbuffer_add_printf(replyBody, "%s", "yolo");
  assert(rc != -1);
  
  return reply;
}

static void parseRequest(RequestInfo& requestInfo) {
  const struct evhttp_uri* uri = evhttp_request_get_evhttp_uri(requestInfo.req);
  /*const*/ struct evhttp_connection* conn = evhttp_request_get_connection(requestInfo.req);
  
  requestInfo.method = evhttp_request_get_command(requestInfo.req);
  requestInfo.uri_host = evhttp_uri_get_host(uri);
  requestInfo.uri_path = evhttp_uri_get_path(uri);
  requestInfo.uri_query = evhttp_uri_get_query(uri);
  requestInfo.uri_scheme = evhttp_uri_get_scheme(uri);
  requestInfo.requestHeaders = evhttp_request_get_input_headers(requestInfo.req);
  requestInfo.requestBody = evhttp_request_get_input_buffer(requestInfo.req);
  evhttp_connection_get_peer(conn, &requestInfo.remoteAddress, (ev_uint16_t*) &requestInfo.remotePort);
  
#if 0
	struct evhttp_connection *conn;
	enum evhttp_cmd_type method;
	const struct evhttp_uri *uri;
	struct evkeyvalq *headers;

	const char *host, *uri_host, *uri_path, *uri_query, *uri_user_info, *uri_scheme;
	ev_uint16_t port;
	char *addr;
	int uri_port;

	struct evkeyval *header;
	struct evkeyvalq *out_headers;
	struct evbuffer *buffer;

	/* fetch request data */
	conn = evhttp_request_get_connection(req);
	host = evhttp_request_get_host(req);
	evhttp_connection_get_peer(conn, &addr, &port);
	method = evhttp_request_get_command(req);
	uri = evhttp_request_get_evhttp_uri(req);
	headers = evhttp_request_get_input_headers(req);
	uri_host = evhttp_uri_get_host(uri);
	uri_path = evhttp_uri_get_path(uri);
	uri_query = evhttp_uri_get_query(uri);
	uri_user_info = evhttp_uri_get_userinfo(uri);
	uri_scheme = evhttp_uri_get_scheme(uri);
	uri_port = evhttp_uri_get_port(uri);

	/* simple log */
	for(header=headers->tqh_first; header; header=header->next.tqe_next) {
		printf("%s: %s\n", header->key, header->value);
	}

	printf("addr:%s, port:%d, host:%s, method:%d, host:%s, path:%s, query:%s, user info:%s, scheme:%s, port:%d\n",
			addr, port, host, method, uri_host, uri_path, uri_query, uri_user_info, uri_scheme, uri_port);
#endif
}
